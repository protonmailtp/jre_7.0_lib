mysql> describe borrower; 
 

mysql> create table fine(rollno int ,fdate date,amt int, constraint xyz foreign key(rollin) references 
borrower(roll_no) ); 
Query OK, 0 rows affected (0.04 sec) 

mysql> describe fine;
 

mysql> insert into borrower values(1,"a","2020/11/01","java","I"); 
Query OK, 1 row affected, 1 warning (0.03 sec) 

mysql> insert into borrower values(2,"b","2020/10/15","networking","I"); 
Query OK, 1 row affected, 1 warning (0.00 sec) 

mysql> insert into borrower values(3,"c","2020/09/22","DBMS","I"); 
Query OK, 1 row affected, 1 warning (0.01 sec) 
mysql> insert into borrower values(4,"d","2020/09/22","CN","I"); 
Query OK, 1 row affected, 1 warning (0.01 sec) 

mysql> select * from borrower;
 

mysql> select * from fine; 
Empty set (0.00 sec) 

mysql> delimiter $ 
mysql> create procedure fine_calculation(IN rno int(3),bname char(20)) 
 -> begin 
 -> declare i_date date; 
 -> declare diff int; 
 -> declare fine_amt int; 
 -> declare exit handler for sqlexception select 'Table not found'; 
 -> select dateofIssue into i_date from borrower where rollin =rno and bname =bname; 
 -> select datediff(curdate(),i_date) into diff; 
 -> if(diff>15 and diff<=30) then 
 -> set fine_amt = diff*5; 
 -> insert into fine values(rno,curdate(),fine_amt); 
 -> elseif(diff>30) then 
 -> set fine_amt = 15*5+(diff-30)*50; 
 -> insert into fine values(rno,curdate(),fine_amt); 
 -> end if; 
 -> update borrower set status ='R' where rollin=rno and bname=bname; 
 -> end; 
 -> $ 
Query OK, 0 rows affected, 1 warning (0.11 sec) 

mysql> call fine_calculation(3,"DBMS"); 
Query OK, 1 row affected, 1 warning (0.01 sec) 

mysql> select * from borrower;
 







Assignment 5
mysql> create database stud;
Query OK, 1 row affected (0.02 sec)

mysql> use stud;
Database changed
mysql> create table stud_marks(roll_no integer primary key,name varchar(20),total_marks integer);
Query OK, 0 rows affected (0.02 sec)

mysql> create table result(roll_no integer,class varchar(20),constraint xyz foreign key(roll_no) references stud_marks(roll_no));
Query OK, 0 rows affected (0.03 sec)

mysql> insert into stud_marks value (1,'aa',930);
Query OK, 1 row affected (0.04 sec)

mysql> insert into stud_marks(roll_no,name,total_marks) values(2,'bb',1130),(3,'cc',950),(4,'dd',840),(5,'ee',1000),(6,'ff',860);
Query OK, 5 rows affected (0.04 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> select * from stud_marks;
 
6 rows in set (0.00 sec)

mysql> delimiter //
mysql> create procedure credit (IN roll integer)
    -> begin
    -> declare m integer;
    -> declare c varchar(20);
    -> select total_marks into m from stud_marks where roll_no=roll;
    -> if m>=990 and m<=1500 then
    -> set c='Distinction';
    -> insert into result values(roll,c);
    -> elseif m>=900 and m<=989 then
    -> set c='First Class';
    -> insert into result values(roll,c);
    -> elseif m>=825 and m<=899 then
    -> set c='Higher Second Class';
    -> insert into result values(roll,c);
    -> end if;
    -> end //
Query OK, 0 rows affected (0.05 sec)

mysql> call credit(1)//
Query OK, 1 row affected (0.04 sec)

mysql> select * from result//
 
1 row in set (0.00 sec)

mysql> call credit(2)//
Query OK, 1 row affected (0.04 sec)

mysql> call credit(3)//
Query OK, 1 row affected (0.04 sec)

mysql> call credit(3)//
Query OK, 1 row affected (0.04 sec)

mysql> call credit(4)//
Query OK, 1 row affected (0.01 sec)

mysql> call credit(5)//
Query OK, 1 row affected (0.04 sec)

mysql> call credit(6)//
Query OK, 1 row affected (0.04 sec)

mysql> select * from result//
 
7 rows in set (0.00 sec)






Assignment 6
mysql> create database stud;
Query OK, 1 row affected (0.02 sec)

mysql> use stud;
Database changed

mysql> create table stud_marks(roll_no integer primary key,name varchar(20),total_marks integer);
Query OK, 0 rows affected (0.02 sec)

mysql> SET GLOBAL log_bin_trust_function_creators = 1;

mysql> delimiter //

mysql> create function disp_grade2(roll1 integer) RETURNS varchar(20) begin declare m1 integer; declare c1 varchar(20); select total_marks into m1 from stud_marks where roll1=roll_no; if m1>=990 and m1<=1500 then set c1='Distinction'; elseif m1>=900 and m1<=989 then set c1='First Class'; elseif m1>=825 and m1<=899 then set c1='Higher Second Class'; end if; return c1;end //
Query OK, 0 rows affected (0.04 sec)

mysql> select disp_grade2(1)//
 
1 row in set (0.04 sec)

mysql> select disp_grade2(2)//
 
1 row in set (0.00 sec)

mysql> select disp_grade2(3)//
 
1 row in set (0.00 sec)

mysql> select disp_grade2(4)//
 
1 row in set (0.00 sec)

mysql> select disp_grade2(5)//
 
1 row in set (0.00 sec)

mysql> select disp_grade2(6)//
 
1 row in set (0.00 sec)



































Assignment 7
mysql> create database student;
Query OK, 1 row affected (0.04 sec)

mysql> use student;
Database changed
mysql> create table stud_marks(roll_no int primary key,name varchar(100),total_marks int);
Query OK, 0 rows affected (0.04 sec)

mysql> insert into stud_marks values(1,'aaa',800);
Query OK, 1 row affected (0.04 sec)

mysql> insert into stud_marks values(2,'bbb',950);
Query OK, 1 row affected (0.00 sec)

mysql> insert into stud_marks values(3,'ccc',650);
Query OK, 1 row affected (0.04 sec)

mysql> select * from stud_marks;
 
3 rows in set (0.00 sec)

mysql> create table new_stud_marks(roll_no int, grade char(10));
Query OK, 0 rows affected (0.05 sec)

mysql> select * from new_stud_marks;
Empty set (0.00 sec)

mysql> delimiter $$
mysql> create procedure set_cursor() begin declare rollno int; declare marks int; declare flag int; declare c1 cursor for select roll_no, total_marks from stud_marks; open c1; l1:loop fetch c1 into rollno, marks; set flag=0; select roll_no into flag from new_stud_marks where new_stud_marks.roll_no = rollno; if flag = 0 then if marks<=1500 and marks>=990 then insert into new_stud_marks values(rollno,'DIST'); end if; if marks<990 and marks>=900 then insert into new_stud_marks values(rollno,'FC'); end if; if marks<900 and marks>=825 then insert into new_stud_marks values(rollno,'HSC'); end if; if marks<825 and marks>=750 then insert into new_stud_marks values(rollno,'SC'); end if; if marks<750 and marks>=600 then insert into new_stud_marks values(rollno,'PC'); end if; if marks<600 then insert into new_stud_marks values(rollno,'FAIL'); end if; end if; end loop l1; close c1; end $$
Query OK, 0 rows affected (0.04 sec)

mysql> select * from stud_marks $$
 
3 rows in set (0.00 sec)

mysql> call set_cursor()$$
ERROR 1329 (02000): No data - zero rows fetched, selected, or processed
mysql> select * from new_stud_marks $$
 
3 rows in set (0.00 sec)

mysql> insert into stud_marks values(4,'dd',1000);
    -> $$
Query OK, 1 row affected (0.03 sec)

mysql> select * from stud_marks
    -> $$
 
4 rows in set (0.00 sec)

mysql> call set_cursor()$$
ERROR 1329 (02000): No data - zero rows fetched, selected, or processed
mysql> select * from new_stud_marks $$
 
4 rows in set (0.00 sec)




Assignment 8
mysql> create database lib;
Query OK, 1 row affected (0.04 sec)

mysql> use lib;
Database changed
mysql> create table library(accession integer primary key, title varchar(60),author varchar(80),publisher varchar(50));
Query OK, 0 rows affected (0.06 sec)

mysql> create table library_audit(accession integer, title varchar(60),author varchar(80),publisher varchar(50),operation varchar(50),constraint ad foreign key(accession)references library(accession));
Query OK, 0 rows affected (0.07 sec)

mysql> describe library;
 
4 rows in set (0.00 sec)

mysql> describe library_audit;
 
5 rows in set (0.00 sec)

mysql> insert into library values(1,'Let us C','kanitakar','Tata');
Query OK, 1 row affected (0.01 sec)

mysql> insert into library values(2,'C programming','balagi','technical');
Query OK, 1 row affected (0.00 sec)

mysql> insert into library values(3,'Distributed Systems','AAA','TecMax');
Query OK, 1 row affected (0.04 sec)

mysql> create trigger update_lib after update on library for each row insert into library_audit(accession,title,author,publisher,operation)values(old.accession,old.title,old.author,old.publisher,'update');
Query OK, 0 rows affected (0.04 sec)

mysql> select * from library_audit;
Empty set (0.00 sec)

mysql> select * from library;
 
3 rows in set (0.00 sec)

mysql> update library set publisher='tata' where accession=2;
Query OK, 1 row affected (0.04 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from library_audit;
 
1 row in set (0.00 sec)

mysql> create trigger delete_lib after delete on library for each row insert into library_audit(accession,title,author,publisher,operation)values(old.accession,old.title,old.author,old.publisher,'delete');
Query OK, 0 rows affected (0.04 sec)

mysql> SET foreign_key_checks=0;
Query OK, 0 rows affected (0.00 sec)

mysql> select * from library_audit;
 
1 row in set (0.00 sec)

mysql> delete from library where accession=1;
Query OK, 1 row affected (0.04 sec)

mysql> select * from library_audit;
 
2 rows in set (0.00 sec)

mysql> create trigger insert_lib after insert on library for each row insert into library_audit(accession,title,author,publisher,operation)values(new.accession,new.title,new.author,new.publisher,'insert');
Query OK, 0 rows affected (0.01 sec)

mysql> insert into library values(4,'Java Programming','BBB','technical');
Query OK, 1 row affected (0.04 sec)

mysql> select * from library_audit;
 
3 rows in set (0.00 sec)
































test> use mydb
switched to db mydb

mydb> db.createCollection('stud');
{ ok: 1 }

mydb> db.stud.insert({rollno:1, name:'ZZZ',marks:91});
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("635030a1df9e6781eae03c1e") }
}
mydb> db.stud.find().pretty()
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: 'ZZZ',
    marks: 91
  }
]

mydb> db.stud.insert([{rollno:2, name:'AAA', marks:90}, {rollno:3, name:'BBB', marks:80}, {rollno:4, name:'CCC', marks:70}, {rollno:5, name:'DDD', marks:85}, {rollno:6, name:'EEE', marks:90}, {rollno:7, name:'FFF', marks:95}, {rollno:8, name:'GGG', marks:70}, {rollno:9, name:'HHH', marks:60}, {rollno:10, name:'III', marks:98}]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("6350343adf9e6781eae03c28"),
    '1': ObjectId("6350343adf9e6781eae03c29"),
    '2': ObjectId("6350343adf9e6781eae03c2a"),
    '3': ObjectId("6350343adf9e6781eae03c2b"),
    '4': ObjectId("6350343adf9e6781eae03c2c"),
    '5': ObjectId("6350343adf9e6781eae03c2d"),
    '6': ObjectId("6350343adf9e6781eae03c2e"),
    '7': ObjectId("6350343adf9e6781eae03c2f"),
    '8': ObjectId("6350343adf9e6781eae03c30")
  }
}
mydb> db.stud.find().pretty()
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: 'ZZZ',
    marks: 91
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c28"),
    rollno: 2,
    name: 'AAA',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c29"),
    rollno: 3,
    name: 'BBB',
    marks: 80
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2a"),
    rollno: 4,
    name: 'CCC',
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2b"),
    rollno: 5,
    name: 'DDD',
    marks: 85
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2c"),
    rollno: 6,
    name: 'EEE',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2d"),
    rollno: 7,
    name: 'FFF',
    marks: 95
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2e"),
    rollno: 8,
    name: 'GGG',
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2f"),
    rollno: 9,
    name: 'HHH',
    marks: 60
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c30"),
    rollno: 10,
    name: 'III',
    marks: 98
  }
]
mydb> db.stud.find({name:'AAA'}).pretty();
[
  {
    _id: ObjectId("6350343adf9e6781eae03c28"),
    rollno: 2,
    name: 'AAA',
    marks: 90
  }
]

mydb> db.stud.find({},{name:1}).pretty();
[
  { _id: ObjectId("635030a1df9e6781eae03c1e"), name: 'ZZZ' },
  { _id: ObjectId("6350343adf9e6781eae03c28"), name: 'AAA' },
  { _id: ObjectId("6350343adf9e6781eae03c29"), name: 'BBB' },
  { _id: ObjectId("6350343adf9e6781eae03c2a"), name: 'CCC' },
  { _id: ObjectId("6350343adf9e6781eae03c2b"), name: 'DDD' },
  { _id: ObjectId("6350343adf9e6781eae03c2c"), name: 'EEE' },
  { _id: ObjectId("6350343adf9e6781eae03c2d"), name: 'FFF' },
  { _id: ObjectId("6350343adf9e6781eae03c2e"), name: 'GGG' },
  { _id: ObjectId("6350343adf9e6781eae03c2f"), name: 'HHH' },
  { _id: ObjectId("6350343adf9e6781eae03c30"), name: 'III' }
]
mydb> db.stud.find({},{name:1,rollno:1}).pretty();
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: 'ZZZ'
  },
  { _id: ObjectId("6350343adf9e6781eae03c28"), rollno: 2, name: 'AAA' },
  {
    _id: ObjectId("6350343adf9e6781eae03c29"),
    rollno: 3,
    name: 'BBB'
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2a"),
    rollno: 4,
    name: 'CCC'
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2b"),
    rollno: 5,
    name: 'DDD'
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2c"),
    rollno: 6,
    name: 'EEE'
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2d"),
    rollno: 7,
    name: 'FFF'
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2e"),
    rollno: 8,
    name: 'GGG'
  },
  { _id: ObjectId("6350343adf9e6781eae03c2f"), rollno: 9, name: 'HHH' },
  {
    _id: ObjectId("6350343adf9e6781eae03c30"),
    rollno: 10,
    name: 'III'
  }
]
mydb> db.stud.find({name:'ZZZ',rollno:1}).pretty();
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: 'ZZZ',
    marks: 91
  }
]
mydb> db.stud.find({marks:{$lt:70}}).pretty();
[
  {
    _id: ObjectId("6350343adf9e6781eae03c2f"),
    rollno: 9,
    name: 'HHH',
    marks: 60
  }
]
mydb> db.stud.find({marks:{$gt:70}}).pretty();
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: 'ZZZ',
    marks: 91
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c28"),
    rollno: 2,
    name: 'AAA',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c29"),
    rollno: 3,
    name: 'BBB',
    marks: 80
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2b"),
    rollno: 5,
    name: 'DDD',
    marks: 85
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2c"),
    rollno: 6,
    name: 'EEE',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2d"),
    rollno: 7,
    name: 'FFF',
    marks: 95
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c30"),
    rollno: 10,
    name: 'III',
    marks: 98
  }
]
mydb> db.stud.find({marks:{$gte:90}}).pretty();
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: 'ZZZ',
    marks: 91
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c28"),
    rollno: 2,
    name: 'AAA',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2c"),
    rollno: 6,
    name: 'EEE',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2d"),
    rollno: 7,
    name: 'FFF',
    marks: 95
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c30"),
    rollno: 10,
    name: 'III',
    marks: 98
  }
]
mydb> db.stud.find({marks:{$lte:80}}).pretty();
[
  {
    _id: ObjectId("6350343adf9e6781eae03c29"),
    rollno: 3,
    name: 'BBB',
    marks: 80
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2a"),
    rollno: 4,
    name: 'CCC',
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2e"),
    rollno: 8,
    name: ‘GGG’,
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2f"),
    rollno: 9,
    name: ‘HHH’,
    marks: 60
  }
]

mydb> db.stud.update({rollno:2},{$set:{name:'AAA'}});
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 0,
  upsertedCount: 0
}
mydb> db.stud.find().pretty()
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: ‘ZZZ',
    marks: 91
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c28"),
    rollno: 2,
    name: 'AAA',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c29"),
    rollno: 3,
    name: 'BBB',
    marks: 80
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2a"),
    rollno: 4,
    name: 'CCC',
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2b"),
    rollno: 5,
    name: 'DDD',
    marks: 85
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2c"),
    rollno: 6,
    name: 'EEE',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2d"),
    rollno: 7,
    name: 'FFF',
    marks: 95
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2e"),
    rollno: 8,
    name: 'GGG',
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2f"),
    rollno: 9,
    name: 'HHH',
    marks: 60
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c30"),
    rollno: 10,
    name: 'III',
    marks: 98
  }
]

mydb> db
mydb

mydb> db.stud.remove({name:'xyz',rollno:1,marks:90});
DeprecationWarning: Collection.remove() is deprecated. Use deleteOne, deleteMany, findOneAndDelete, or bulkWrite.
{ acknowledged: true, deletedCount: 0 }

mydb> db.stud.remove({name:'BBB',rollno:3,marks:80});
{ acknowledged: true, deletedCount: 1 }
mydb> db.stud.find().pretty()
[
  {
    _id: ObjectId("635030a1df9e6781eae03c1e"),
    rollno: 1,
    name: 'ZZZ',
    marks: 91
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c28"),
    rollno: 2,
    name: 'AAA',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2a"),
    rollno: 4,
    name: 'CCC',
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2b"),
    rollno: 5,
    name: 'DDD',
    marks: 85
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2c"),
    rollno: 6,
    name: 'EEE',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2d"),
    rollno: 7,
    name: 'FFF',
    marks: 95
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2e"),
    rollno: 8,
    name: 'GGG',
    marks: 70
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2f"),
    rollno: 9,
    name: 'HHH',
    marks: 60
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c30"),
    rollno: 10,
    name: 'III',
    marks: 98
  }
]
mydb> db.stud.find({name:{$in:['FFF','III','JJJ']}});
[
  {
    _id: ObjectId("6350343adf9e6781eae03c2c"),
    rollno: 6,
    name: 'EEE',
    marks: 90
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c2f"),
    rollno: 9,
    name: 'HHH',
    marks: 60
  },
  {
    _id: ObjectId("6350343adf9e6781eae03c30"),
    rollno: 10,
    name: 'III',
    marks: 98
  }
]

mydb> db.stud.ensureIndex({name:1});
[ 'name_1' ]

mydb> db.stud.getIndexes();
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { name: 1 }, name: 'name_1' }
]

mydb> db.stud.dropIndex({name:1});
{ nIndexesWas: 2, ok: 1 }
mydb> db.stud.getIndexes();
[ { v: 2, key: { _id: 1 }, name: '_id_' } ]





















test> use customer
switched to db customer

customer> create collection order

customer> db.createCollection("order")

customer> db.order.insert([{cust_id: 101, item: "bags", amt: 500, quantity: 5, status: "Y"},{cust_id: 102, item: "pens", amt: 100, quantity: 10, status: "Y"},{cust_id: 103, item: "mobile", amt: 5000, quantity: 1, status: "N"},{cust_id: 104, item: "flowers", amt: 200, quantity: 10, status: "N"}])
DeprecationWarning: Collection.insert() is deprecated. Use insertOne, insertMany, or bulkWrite.
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("6333d68190ea63d1e6b3f4c2"),
    '1': ObjectId("6333d68190ea63d1e6b3f4c3"),
    '2': ObjectId("6333d68190ea63d1e6b3f4c4"),
    '3': ObjectId("6333d68190ea63d1e6b3f4c5")
  }
}
customer> db.order.find().pretty()
[
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c2"),
    cust_id: 101,
    item: 'bags',
    amt: 500,
    quantity: 5,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c3"),
    cust_id: 102,
    item: 'pens',
    amt: 100,
    quantity: 10,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c4"),
    cust_id: 103,
    item: 'mobile',
    amt: 5000,
    quantity: 1,
    status: 'N'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c5"),
    cust_id: 104,
    item: 'flowers',
    amt: 200,
    quantity: 10,
    status: 'N'
  }
]

customer> db.order.distinct("cust_id")
[ 101, 102, 103, 104 ]

MongoServerError: BSON field 'count.query' is the wrong type 'string', expected type 'object'
customer> db.order.count()
4

customer> db.order.aggregate([{$group:{"_id": "$cust_id", Total:{$min: "$amt"}}}])
[
  { _id: 102, Total: 100 },
  { _id: 104, Total: 200 },
  { _id: 101, Total: 500 },
  { _id: 103, Total: 5000 }
]

customer> db.order.aggregate([{$group:{"_id": "$cust_id", Total:{$max: "$amt"}}}])
[
  { _id: 103, Total: 5000 },
  { _id: 101, Total: 500 },
  { _id: 104, Total: 200 },
  { _id: 102, Total: 100 }
]

customer> db.order.aggregate([{$group:{"_id": "$cust_id", Total:{$sum: "$amt"}}}])
[
  { _id: 101, Total: 500 },
  { _id: 103, Total: 5000 },
  { _id: 104, Total: 200 },
  { _id: 102, Total: 100 }
]



customer> db.order.aggregate([{$group:{"_id": "$cust_id", Total:{$avg: "$amt"}}}])
[
  { _id: 102, Total: 100 },
  { _id: 104, Total: 200 },
  { _id: 101, Total: 500 },
  { _id: 103, Total: 5000 }
]

customer> db.order.aggregate([{$group:{"_id": "by_user", Total:{$min: "$amt"}}}])
[ { _id: 'by_user', Total: 100 } ]

customer> db.order.aggregate([{$group:{"_id": "by_user", Total:{$max: "$amt"}}}])
[ { _id: 'by_user', Total: 5000 } ]

customer> db.order.aggregate([{$group:{"_id": "by_user", Total:{$sum: "$amt"}}}])
[ { _id: 'by_user', Total: 5800 } ]

customer> db.order.aggregate([{$group:{"_id": "by_user", Total:{$avg: "$amt"}}}])
[ { _id: 'by_user', Total: 1450 } ]

customer> db.order.aggregate([{$match:{status:"Y"}},{$group:{"_id": "by_user", Total:{$min: "$amt"}}}])
[ { _id: 'by_user', Total: 100 } ]

customer> db.order.aggregate([{$match:{status:"Y"}},{$group:{"_id": "by_user", Total:{$max: "$amt"}}}])
[ { _id: 'by_user', Total: 500 } ]

customer> db.order.aggregate([{$match:{status:"Y"}},{$group:{"_id": "by_user", Total:{$sum: "$amt"}}}])
[ { _id: 'by_user', Total: 600 } ]

customer> db.order.aggregate([{$match:{status:"Y"}},{$group:{"_id": "by_user", Total:{$avg: "$amt"}}}])
[ { _id: 'by_user', Total: 300 } ]

customer> db.order.aggregate([{$match:{status:"Y"}},{$group:{"_id": "by_user", Total:{$first: "$amt"}}}])
[ { _id: 'by_user', Total: 500 } ]

customer> db.order.aggregate([{$match:{status:"Y"}},{$group:{"_id": "by_user", Total:{$last: "$amt"}}}])
[ { _id: 'by_user', Total: 100 } ]



customer> db.order.find().pretty()
[
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c2"),
    cust_id: 101,
    item: 'bags',
    amt: 500,
    quantity: 5,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c3"),
    cust_id: 102,
    item: 'pens',
    amt: 100,
    quantity: 10,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c4"),
    cust_id: 103,
    item: 'mobile',
    amt: 5000,
    quantity: 1,
    status: 'N'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c5"),
    cust_id: 104,
    item: 'flowers',
    amt: 200,
    quantity: 10,
    status: 'N'
  }
]

customer> db.order.find().sort({"amt":1})
[
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c3"),
    cust_id: 102,
    item: 'pens',
    amt: 100,
    quantity: 10,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c5"),
    cust_id: 104,
    item: 'flowers',
    amt: 200,
    quantity: 10,
    status: 'N'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c2"),
    cust_id: 101,
    item: 'bags',
    amt: 500,
    quantity: 5,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c4"),
    cust_id: 103,
    item: 'mobile',
    amt: 5000,
    quantity: 1,
    status: 'N'
  }
]

customer> db.order.aggregate([{$match:{status:"Y"}},{$sort: {amt:1}}])
[
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c3"),
    cust_id: 102,
    item: 'pens',
    amt: 100,
    quantity: 10,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c2"),
    cust_id: 101,
    item: 'bags',
    amt: 500,
    quantity: 5,
    status: 'Y'
  }
]

customer> db.order.aggregate([{$match:{status:"Y"}},{$sort: {amt:-1}}])
[
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c2"),
    cust_id: 101,
    item: 'bags',
    amt: 500,
    quantity: 5,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c3"),
    cust_id: 102,
    item: 'pens',
    amt: 100,
    quantity: 10,
    status: 'Y'
  }
]

customer> db.order.aggregate([{$match:{amt:{$gt:100}}},{$sort: {amt:-1}}])
[
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c4"),
    cust_id: 103,
    item: 'mobile',
    amt: 5000,
    quantity: 1,
    status: 'N'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c2"),
    cust_id: 101,
    item: 'bags',
    amt: 500,
    quantity: 5,
    status: 'Y'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c5"),
    cust_id: 104,
    item: 'flowers',
    amt: 200,
    quantity: 10,
    status: 'N'
  }
]

customer> db.order.aggregate([{$match:{amt:{$lt:500}}},{$sort: {amt:-1}}])
[
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c5"),
    cust_id: 104,
    item: 'flowers',
    amt: 200,
    quantity: 10,
    status: 'N'
  },
  {
    _id: ObjectId("6333d68190ea63d1e6b3f4c3"),
    cust_id: 102,
    item: 'pens',
    amt: 100,
    quantity: 10,
    status: 'Y'
  }
]
MongoDB MapReduce

mydb> db.createCollection("orders")
{ ok: 1 }

mydb> use orders
switched to db orders

orders> db.orders.insertMany([
...    { _id: 1, cust_id: "AAAAA", price: 25, items: [ { sku: "oranges", qty: 5, price: 2.5 }, { sku: "apples", qty: 5, price: 2.5 } ]},
...    { _id: 2, cust_id: "AAAAA", price: 70, items: [ { sku: "oranges", qty: 8, price: 2.5 }, { sku: "chocolates", qty: 5, price: 10 } ]},
...    { _id: 3, cust_id: "BBBBB", price: 50, items: [ { sku: "oranges", qty: 10, price: 2.5 }, { sku: "pears", qty: 10, price: 2.5 } ]},
...    { _id: 4, cust_id: "BBBBB", price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ]},
...    { _id: 5, cust_id: "BBBBB", price: 50, items: [ { sku: "chocolates", qty: 5, price: 10 } ]},
...    { _id: 6, cust_id: "CCCCC", price: 35, items: [ { sku: "carrots", qty: 10, price: 1.0 }, { sku: "apples", qty: 10, price: 2.5 } ]},
...    { _id: 7, cust_id: "CCCCC", price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ]},
...    { _id: 8, cust_id: "DDDDD", price: 75, items: [ { sku: "chocolates", qty: 5, price: 10 }, { sku: "apples", qty: 10, price: 2.5 } ]},
...    { _id: 9, cust_id: "DDDDD", price: 55, items: [ { sku: "carrots", qty: 5, price: 1.0 }, { sku: "apples", qty: 10, price: 2.5 }, { sku: "oranges", qtyqty: 10, price: 2.5 } ]},
...    { _id: 10, cust_id: "DDDDD", price: 25, items: [ { sku: "oranges", qty: 10, price: 2.5 } ]}
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10
  }

orders> var mapFunction1 = function() {
...    emit(this.cust_id, this.price);
... };

orders> var reduceFunction1 = function(keyCustId, valuesPrices) {
...    return Array.sum(valuesPrices);
... };

orders> db.orders.mapReduce(
...    mapFunction1,
...    reduceFunction1,
...    { out: "map_reduce_example" }
... )
DeprecationWarning: Collection.mapReduce() is deprecated. Use an aggregation instead.
See https://docs.mongodb.com/manual/core/map-reduce for details.
{ result: 'map_reduce_example', ok: 1 }

orders> db.map_reduce_example.find().sort( { _id: 1 } )
[
  { _id: 'AAAAA', value: 95 },
  { _id: 'BBBBB', value: 125 },
  { _id: 'CCCCC', value: 60 },
  { _id: 'DDDDD', value: 155 }
]


































MongoDB Database Connectivity using JAVA

import com.mongodb.MongoClient;
import com.mongodb.MongoException;
import com.mongodb.client.MongoDatabase;

public class MongoDBConnectivity {
    public static void main(String[] args) {

        MongoClient mongoClient = null;

        try {
            mongoClient = new MongoClient( "127.0.0.1" , 27017 );

            System.out.println("Connected to MongoDB!");

            MongoDatabase database = mongoClient.getDatabase("mydb");
            //Creating a collection
            database.createCollection("testCollection00");
            System.out.println("Collection created successfully!");
        } catch (MongoException e) {
            e.printStackTrace();
        } finally {
            if(mongoClient!=null)
                mongoClient.close();
        }
    }
}

Output: 
javac MongoDBConnectivity.java
java MongoDBConnectivity

Connected to MongoDB!
Collection created successfully!














MongoDB Database Connectivity using PHP

<?php
require 'vendor/autoload.php'; // include Composer's autoloader
header('Content-type: text/plain');
$client = new MongoDB\Client("mongodb://localhost:27017");
if($client){
   echo "Connection Established with $client\n\nDATA SHEET\n";
}
$collection = $client->SITS_TEST->names;
$cursor = $collection->find();
// iterate cursor to display title of documents
  foreach ($cursor as $document) {
  echo "User:".$document["name"] ." ".$document["surname"]."\n";
 }

Output:
Connection Established with mongodb://localhost:27017

DATA SHEET
User:Andrew Brewman
User:Max Payne
User:Kacha Badman
